const MARGIN_MM = 10,
  JPEG_QUALITY = 0.9,
  A4_WIDTH_MM = 210,
  A4_HEIGHT_MM = 297,
  PDF_MAX_MM = 5080,
  A4_CONTENT_WIDTH_MM = 190,
  A4_CONTENT_HEIGHT_MM = 277,
  PX_PER_MM = 96 / 25.4,
  DEFAULT_FILENAME = "screencapture",
  CLOB_CHUNK_SIZE = 3e4,
  ICON_BASE = apex_img_dir || "/i/",
  PDFSHIFT_KEY = "sk_f10a3413e1b53d5c6e0869e42a9f2b8031b80f27",
  USE_PDFSHIFT_SANDBOX = !0,
  UT_CSS_URL =
    "https://app.springsolutions.com/i/themes/theme_42/22.2/css/Core.min.css",
  FONT_APEX_CSS =
    "https://app.springsolutions.com/i/libraries/font-apex/2.2.1/css/font-apex.min.css";
var apexScreenCapture = {
  parseBoolean(e) {
    if ("string" != typeof e) return;
    const t = e.trim().toLowerCase();
    return "true" === t || ("false" !== t && void 0);
  },
  clob2Array(e, t) {
    const r = [];
    for (let a = 0; a < e.length; a += t) r.push(e.slice(a, a + t));
    return r;
  },
  dataURI2base64: (e) => e.substring(e.indexOf(",") + 1),
  svg2canvas: function (e, t) {
    try {
      var r, a;
      $(e)
        .find("svg")
        .each(function () {
          ((r = document.createElement("canvas")).className = "tempCanvas"),
            $(this).attr("width", $(this).innerWidth()),
            $(this).attr("height", $(this).innerHeight()),
            (a = (a = new XMLSerializer().serializeToString(this)).replace(
              /xmlns=\"http:\/\/www\.w3\.org\/2000\/svg\"/,
              ""
            )),
            canvg(r, a),
            $(r).insertAfter(this),
            $(this).attr("class", "tempHide"),
            $(this).hide();
        }),
        t();
    } catch (e) {
      t();
    }
  },
  _pdfOnePage(e) {
    const t = 190 / (e.width / PX_PER_MM),
      r = (e.height / PX_PER_MM) * t,
      a = new jsPDF("p", "mm", [210, r + 20]);
    return (
      a.addImage(
        e.toDataURL("image/jpeg", 0.9),
        "JPEG",
        10,
        10,
        190,
        r,
        null,
        "FAST"
      ),
      a
    );
  },
  _pdfMultiPage(e) {
    const t = new jsPDF("p", "mm", "a4"),
      r = 190 / e.width,
      a = Math.floor(277 / r),
      n = Math.ceil(e.height / a);
    for (let i = 0, o = 0; i < n; i++, o += a) {
      i > 0 && t.addPage();
      const n = Math.min(a, e.height - o),
        s = document.createElement("canvas");
      Object.assign(s, { width: e.width, height: n }),
        s.getContext("2d").drawImage(e, 0, o, e.width, n, 0, 0, e.width, n),
        t.addImage(
          s.toDataURL("image/jpeg", 0.9),
          "JPEG",
          10,
          10,
          190,
          n * r,
          null,
          "FAST"
        );
    }
    return t;
  },
  _pdfOneA4Page(e) {
    const t = new jsPDF("p", "mm", "a4"),
      r = t.internal.pageSize.getWidth() - 20,
      a = t.internal.pageSize.getHeight() - 20,
      n = e.width / e.height,
      i = n > r / a ? r : a * n,
      o = i / n,
      s = (r - i) / 2 + 10,
      c = (a - o) / 2 + 10;
    return (
      t.addImage(
        e.toDataURL("image/jpeg", 0.9),
        "JPEG",
        s,
        c,
        i,
        o,
        null,
        "FAST"
      ),
      t
    );
  },
  createPDF(e, t) {
    const r = 190 / (e.width / e.height) + 20;
    return "CONT_PAGE" === t && r <= 5080
      ? apexScreenCapture._pdfOnePage(e)
      : "MULTI_PAGE_A4" === t || r > 5080
      ? apexScreenCapture._pdfMultiPage(e)
      : apexScreenCapture._pdfOneA4Page(e);
  },
  collectAPEXStyleSheets() {
    const e = `${Array.from(document.querySelectorAll('link[rel="stylesheet"]'))
      .filter((e) => e.href.includes("/i/"))
      .map((e) => `<link rel="stylesheet" href="${e.href.split("?")[0]}">`)
      .join("\n")}\n<style>\n${Array.from(document.styleSheets)
      .map((e) => {
        try {
          return Array.from(e.cssRules)
            .map((e) => e.cssText)
            .join("\n");
        } catch (t) {
          return console.error(e + ": " + t), "";
        }
      })
      .join("\n")}\n</style>`;
    return console.log(e), e;
  },
  buildHtmlShell(e) {
    const t = `\n      <!DOCTYPE html>\n      <html lang="en">\n        <head>\n          <meta charset="utf-8">\n          <title>APEX Capture</title>\n  \n\n  \n          <style>\n            ${Array.from(
      document.styleSheets
    )
      .map((e) => {
        try {
          return Array.from(e.cssRules)
            .map((e) => e.cssText)
            .join("\n");
        } catch (e) {
          return "";
        }
      })
      .join(
        "\n"
      )}\n          </style>\n        </head>\n        <body>\n          ${e}\n        </body>\n      </html>\n    `;
    return console.log(t), t;
  },
  convertViaPdfShift(e, t, r) {
    const a = "Basic " + btoa("api:" + PDFSHIFT_KEY);
    fetch("https://api.pdfshift.io/v3/convert/pdf", {
      method: "POST",
      headers: { "Content-Type": "application/json", Authorization: a },
      body: JSON.stringify({ source: e, sandbox: true, margin: 10 }),
    })
      .then((e) => {
        if (!e.ok) throw new Error(e.status);
        return e.blob();
      })
      .then((e) => {
        const a = URL.createObjectURL(e),
          n = Object.assign(document.createElement("a"), {
            href: a,
            download: t,
          });
        document.body.appendChild(n),
          n.click(),
          n.remove(),
          URL.revokeObjectURL(a),
          r();
      })
      .catch((e) => {
        console.error("pdfShift error", e), r();
      });
  },
  getImage(e, t, r, a, n, i, o = () => {}) {
    let s, c;
    if (
      ("application/pdf" === a
        ? ((s = apexScreenCapture.createPDF(t, i)),
          (c = s.output("datauristring")))
        : (c = t.toDataURL(a)),
      "DIRECT_DOWNLOAD" === r)
    ) {
      if (s) s.save(filename);
      else {
        const e = Object.assign(document.createElement("a"), {
          href: c,
          download: filename,
        });
        document.body.appendChild(e), e.click(), e.remove();
      }
      return o();
    }
    if ("NEW_TAB" === r)
      return (
        s
          ? window.open(s.output("bloburl"), "_blank")
          : window.open().document.write(`<img src="${c}" />`),
        o()
      );
    const l = apexScreenCapture.dataURI2base64(c),
      p = apexScreenCapture.clob2Array(l, 3e4);
    apex.server.plugin(
      e,
      { f01: p, x01: a },
      {
        dataType: "html",
        success: () => {
          $("body").trigger("screencapture-saved-db"), o();
        },
        error: (e, t) => {
          $("body").trigger("screencapture-error-db"),
            console.error("getImage apex.server.plugin error:", t),
            o();
        },
      }
    );
  },
  doHtml2Canvas(e, t, r, a, n, i, o, s, c, l, p, d) {
    const u = apex.util
      .showSpinner($("body"))
      .attr("data-html2canvas-ignore", "true");
    apexScreenCapture.svg2canvas("body", () => {
      html2canvas($(e), {
        background: a,
        width: n,
        height: i,
        letterRendering: o,
        allowTaint: s,
        useCORS: !0,
        logging: l,
        onrendered: (e) => {
          apexScreenCapture.getImage(r, e, t, c, p, d, () => u.remove());
        },
      }),
        $("body").find(".asc-temp-canvas").remove(),
        $("body").find(".asc-temp-hide").show().removeClass("asc-temp-hide");
    });
  },
  captureScreen() {
    const e = this.action,
      t = e.attribute01,
      r = e.attribute02,
      a = e.attribute04,
      n = e.attribute05,
      i = e.attribute06,
      o = apexScreenCapture.parseBoolean(e.attribute07),
      s = apexScreenCapture.parseBoolean(e.attribute08),
      c = apexScreenCapture.parseBoolean(e.attribute09),
      l = e.attribute10,
      p = e.attribute14,
      d = e.attribute15,
      u =
        "PNG" === d
          ? "image/png"
          : "JPEG" === d
          ? "image/jpeg"
          : "PDF" === d
          ? "application/pdf"
          : "image/png",
      h =
        ("string" == typeof p && p.trim().length
          ? p.trim()
          : "screencapture"
        ).replace(/[\\/:*?"<>|]/g, "_") +
        ("PDFSHIFT" === r
          ? "pdf"
          : "PDF" === d
          ? ".pdf"
          : "JPEG" === d
          ? ".jpg"
          : ".png");
    let m, g;
    if (
      ("body" !== t
        ? ((m = $(t).innerWidth()), (g = $(t).innerHeight()))
        : ((m = document.documentElement.clientWidth),
          (g = document.documentElement.clientHeight)),
      n && (m = parseInt(n, 10)),
      i && (g = parseInt(i, 10)),
      c &&
        console.table({
          jQuerySelector: t,
          downloadType: r,
          backgroundColor: a,
          elemWidthPx: m,
          elemHeightPx: g,
          doLetterRendering: o,
          doAllowTaint: s,
          mimeType: u,
          fileName: p,
          sanitizedFileName: h,
          pdfLayout: l,
          FONT_APEX_CSS: FONT_APEX_CSS,
          UT_CSS_URL: UT_CSS_URL,
        }),
      "PDFSHIFT" !== r)
    )
      apexScreenCapture.doHtml2Canvas(
        t,
        r,
        e.ajaxIdentifier,
        a,
        m,
        g,
        o,
        s,
        u,
        c,
        h,
        l
      );
    else {
      const e = apex.util
          .showSpinner($("body"))
          .attr("data-html2canvas-ignore", "true"),
        r =
          ($(t)
            .clone(!0, !0)
            .find("[data-html2canvas-ignore]")
            .remove()
            .end()
            .prop("outerHTML"),
          apexScreenCapture.buildHtmlShell($(t).prop("outerHTML")));
      apexScreenCapture.convertViaPdfShift(r, h, () => e.remove());
    }
  },
};
